{
    "Simple Fuse":{
        "prefix":"!fuse-init",
        "scope": "fuse",
        "body":[
            "--[[--",
            "   $TM_FILENAME",
            "",
            "  ${1:Description of the fuse}",
            "",
            "--]]--",
            "",
            "",
            "FuRegisterClass('${2:name}', ${3|CT_Tool,CT_ParticleTool,CT_SourceTool,CT_Modifier,CT_ViewLUTPlugin|}, {",
            "\tREGS_Category = \"Fuses\",",
            "\tREGS_OpIconString = '${4}',",
            "\tREGS_OpDescription = '${1}',",
            "\tREG_OpNoMask = true,",
            "\tREG_NoBlendCtrls = true,",
            "\tREG_NoObjMatCtrls = true,",
            "\tREG_NoMotionBlurCtrls = true,",
            "\tREG_Source_GlobalCtrls = true,",
            "\tREG_Source_SizeCtrls = true,",
            "\tREG_Source_AspectCtrls = true,",
            "\tREG_Source_DepthCtrls = true,",
            "\tREG_TimeVariant = true,",
            "\tREG_Fuse_NoEdit = false,",
            "\tREG_Fuse_NoReload = false,",
            "})",
            "",
            "",
            "function Create()",
            "\tInImage = self:AddInput(\"Input\", \"Input\", {",
            "\t\tLINKID_DataType = \"Image\",",
            "\t\tLINK_Main = 1,",
            "\t})",
            "",
            "",
            "\tOutImage = self:AddOutput(\"Output\", \"Output\", {",
            "\t\tLINKID_DataType = \"Image\",",
            "\t\tLINK_Main = 1,",
            "\t})",
            "",
            "",
            "\t${5}",
            "",
            "end",
            "",
            "",
            "function Process(req)",
            "\tlocal img = InImage:GetValue(req)",
            "\timg:Use()",
            "" ,
            "\tOutImage:Set(req, img)",
            "end",
        ],
        "description": "Simple Fuse template"
    },

    "Fragment Shader Fuse": {
      "prefix": "!fuse-shader",
      "body": [
        "--[[--",
        "",
        "  $TM_FILENAME",
        "",
        "  ${1:Description}",
        "",
        "--]]--",
        "",
        "",
        "",
        "FuRegisterClass(\"${2:Name (Identifier)}\", CT_SourceTool, {",
        "\tREGS_Name = \"${2}\",",
        "\tREGS_Category = \"Fuses\",",
        "\tREGS_OpDescription = \"${1}\",",
        "\tREGS_OpIconString = \"${3:Shortcut}\",",
        "\t-- REGS_Company = \"\",",
        "\t-- REGS_URL = \"\",",
        "\tREG_Source_GlobalCtrls = true,",
        "\tREG_Source_SizeCtrls = true,",
        "\tREG_Source_AspectCtrls = true,",
        "\tREG_Source_DepthCtrls = true,",
        "\tREG_TimeVariant = false,",
        "\tREG_Fuse_NoEdit = false,",
        "\tREG_Fuse_NoReload = false,",
        "\tREG_Version\t= 000001,",
        "})",
        "",
        "",
        "",
        "ParametersCode =",
        "[[",
        "  int   width;",
        "  int   height;",
        "  int   compOrder;",
        "  float iTime;",
        "]]",
        "",
        "",
        "",
        "KernelCode =",
        "[[",
        "",
        "__KERNEL__ void ${2}Kernel(",
        "    __CONSTANTREF__ Params*   params,",
        "    __TEXTURE2D__             iChannel0,",
        "    __TEXTURE2D_WRITE__       oChannel)",
        "{",
        "  DEFINE_KERNEL_ITERATORS_XY(x, y);",
        "",
        "  if (x >= params->width || y >= params->height)",
        "    return;",
        "",
        "  float2 gl_FragCoord   = to_float2(x, y);",
        "  float4 gl_FragColor   = to_float4(0.0f,0.0f,0.0f,1.0f);",
        "  float3 iResolution    = to_float3(params->width, params->height, 1.0f);",
        "  float  iTime          = params->iTime;",
        "  float  u              = float(x) / float(params->width);",
        "  float  v              = float(y) / float(params->height);",
        "",
        "  // Your shader code goes here ...",
        "  gl_FragColor.x=u; gl_FragColor.y=v; $0",
        "",
        "",
        "",
        "  _tex2DVec4Write(oChannel, gl_FragCoord.x, gl_FragCoord.y, gl_FragColor);",
        "}",
        "",
        "]]",
        "",
        "",
        "",
        "function Create()",
        "",
        "\tInImage = self:AddInput( \"Input\", \"Image\",",
        "\t\t{ LINKID_DataType = \"Image\", LINK_Main = 1, INP_Required = false })",
        "",
        "\tOutImage = self:AddOutput(\"Output\", \"Output\",",
        "\t\t{ LINKID_DataType = \"Image\", LINK_Main = 1, })",
        "",
        "end",
        "",
        "",
        "",
        "function Process(req)",
        "",
        "\tlocal framerate = self.Comp:GetPrefs(\"Comp.FrameFormat.Rate\")",
        "",
        "\tlocal imgattrs = {",
        "\t\tIMG_Document = self.Comp,",
        "\t\t{ IMG_Channel = \"Red\", },",
        "\t\t{ IMG_Channel = \"Green\", },",
        "\t\t{ IMG_Channel = \"Blue\", },",
        "\t\t{ IMG_Channel = \"Alpha\", },",
        "\t\tIMG_Width  = Width,",
        "\t\tIMG_Height = Height,",
        "\t\tIMG_XScale = XAspect,",
        "\t\tIMG_YScale = YAspect,",
        "\t\tIMAT_OriginalWidth  = realwidth,",
        "\t\tIMAT_OriginalHeight = realheight,",
        "\t\tIMG_Quality = not req:IsQuick(),",
        "\t\tIMG_MotionBlurQuality = not req:IsNoMotionBlur(),",
        "\t\tIMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),",
        "\t\tIMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )",
        "\t}",
        "",
        "\tif (InImage:GetValue(req) ~= nil) then",
        "\t\tsrc = InImage:GetValue(req)",
        "\telse",
        "\t\tsrc = Image(imgattrs)",
        "\t\tsrc:Fill(Pixel({R=0,G=0,B=0,A=0}))",
        "\tend",
        "",
        "\tif req:IsPreCalc() then",
        "\t\tOutImage:Set(req, Image({IMG_Like = src, IMG_NoData = true}))",
        "\t\treturn",
        "\tend",
        "",
        "\tlocal dst = Image({IMG_Like = src, IMG_DeferAlloc = true})",
        "",
        "\tlocal node = DVIPComputeNode(",
        "\t\treq, \"${2}Kernel\",",
        "\t\tKernelCode, \"Params\", ParametersCode)",
        "",
        "\tparams = node:GetParamBlock(ParametersCode)",
        "\tparams.width = src.DataWindow:Width()",
        "\tparams.height = src.DataWindow:Height()",
        "\tparams.compOrder = src:IsMask() and 1 or 15",
        "\tparams.iTime = req.Time / framerate",
        "",
        "\tnode:SetParamBlock(params)",
        "",
        "\tnode:AddSampler(\"RowSampler\", TEX_FILTER_MODE_LINEAR,",
        "\t\tTEX_ADDRESS_MODE_BORDER, TEX_NORMALIZED_COORDS_TRUE)",
        "",
        "\tnode:AddInput(\"iChannel0\", src)",
        "\tnode:AddOutput(\"oChannel\", dst)",
        "",
        "\tlocal success = node:RunSession(req)",
        "\tif not success then",
        "\t\tdst = nil",
        "\t\tdump(node:GetErrorLog())",
        "\tend",
        "",
        "\tOutImage:Set(req, dst)",
        "end",
        ""
      ],
      "description": "Template for a Fuse implementing a fragment shader"
    },

    "FuRegisterClass": {
        "prefix": "!FuRegisterClass",
        "scope": "fuse",
        "body": [
            "FuRegisterClass('${1:name}', ${2|CT_Tool,CT_ParticleTool,CT_SourceTool,CT_Modifier,CT_ViewLUTPlugin|}, {",
            "\tREGS_Category = \"Fuses\",",
            "\tREGS_OpIconString = 'ST',",
            "\tREGS_OpDescription = 'Source Test',",
            "\tREG_OpNoMask = true,",
            "\tREG_NoBlendCtrls = true,",
            "\tREG_NoObjMatCtrls = true,",
            "\tREG_NoMotionBlurCtrls = true,",
            "\tREG_Source_GlobalCtrls = true,",
            "\tREG_Source_SizeCtrls = true,",
            "\tREG_Source_AspectCtrls = true,",
            "\tREG_Source_DepthCtrls = true,",
            "\tREG_TimeVariant = true,",
            "\tREG_Fuse_NoEdit = false,",
            "\tREG_Fuse_NoReload = false,",
            "})",
        ],
        "description": "Registration Class for a Fuse. This is needed"
    },

    "NotifyChanged": {
      "prefix": "!NotifyChanged",
      "scope": "fuse",
      "body": [
            "------------------------------------------------------------------------------",
            "-- Callback for input control changes.",
            "-- This callback gets called whenever an input control emits a change event.",
            "-- For a control to do so, you must set its `INP_DoNotifyChanged` attribute",
            "-- to `true` when creating it.",
            "-- @param inp the input object whose control has changed",
            "-- @param param the new parameter value object (may be `nil`)",
            "-- @param time the current frame number, as shown on the comp's timeline.",
            "-- @see https://www.steakunderwater.com/VFXPedia/96.0.243.189/index2ab5.html?title=Eyeon:Script/Reference/Applications/Fuse/Tool/Events/NotifyChanged"
            "function NotifyChanged(inp, param, time)",
            "",
            "\tif inp==nil then",
            "\t\treturn",
            "\tend",
            "",
            "\tif inp==${InControl} then",
            "\t\t$0"
            "\tend"
            "",
            "end",
            ""
        ],
        "description": "Input control change callback."
    },

    "Generic Add Input": {
        "prefix": "!AddInput",
        "scope": "fuse",
        "body": [
            "In${1:variableName} = self:AddInput('${2:labelname}', '${2}', {",
            "\tLINKID_DataType='${3|Image,FuID,Gradient,Number,Particles,Point,Text|}',",
            "\t{${4:Attributes}}",
            "})",
        ],
        "description": "Add an input control for a Fuse"
    },

    "Add Input Button Control ": {
        "prefix": "!AddButton",
        "scope": "fuse",
        "body": [
            "In${1:Button} = self:AddInput('${2:This is a button}', '${3:ButtonLabel1}', {",
            "\tLINKID_DataType=\"Text\",",
            "\tINPID_InputControl = \"ButtonControl\",",
            "\tBTNC_Align = \"${4|Left,CenteredLeft,Center,CenteredRight,Right|}\",",
            "\tINP_DoNotifyChanged = true,",
            "\tINP_External = false,",
            "})",
        ],
        "description": "Add Button Control to Fusion's Inspector Page"
    },

    "Add Input Checkbox Control ": {
        "prefix": "!AddCheckbox",
        "scope": "fuse",
        "body": [
            "In${1:Checkbox} = self:AddInput('${2:MyCheckbox}', '${2}', {",
            "\tLINKID_DataType=\"Number\",",
            "\tINPID_InputControl = \"CheckboxControl\",",
            "\tINP_Integer = true,",
            "\tINP_Default = 1.0,",
            "})",
        ],
        "description": "Add Checkbox Control to Fusion's Inspector Page"
    },

    "Add Input Color Control": {
        "prefix": "!AddColor",
        "scope": "fuse",
        "body": [
            "In${1:ColorControl} = self:AddInput('${2|Red,Green,Blue,Alpha|}', '${2}', {",
            "\tLINKID_DataType=\"Number\",",
            "\tINPID_InputControl = \"ColorControl\",",
            "\tICS_Name = \"${3:Color Name}\",",
            "\tINP_MinScale = 0.0,",
            "\tINP_MaxScale = 1.0,",
            "\tINP_Default  = 1.0,",
            "\tIC_ControlGroup = 1,",
            "\tIC_ControlID = 0,",
            "})",
        ],
        "description": "Add a Color Control to Fusion's Inspector Page"
    },

    "Add Input Combo Control": {
        "prefix": "!AddCombo",
        "scope": "fuse",
        "body": [
          "In${1:Operation} = self:AddInput('${2:Operator}', '${2}', {",
          "\tLINKID_DataType=\"Number\",",
          "\tINPID_InputControl = \"ComboControl\",",
          "\tINP_Default  = 1.0,",
          "\tINP_Integer = true,",
          "\tICD_Width = 0.5,",
          "\tCC_LabelPosition = \"${3|Horizontal,Vertical|}\",",
          "\t{CCS_AddString = \"${4:Option1}\", },",
          "\t{CCS_AddString = \"${5:Option2}\", },",
          "})",
        ],
        "description": "Add Combo Control to Fusion's Inspector Page"
    },

    "Add Input Combo ID Control": {
        "prefix": "!AddComboID",
        "scope": "fuse",
        "body": [
            "In${1:Direction} = self:AddInput('${2:Direction of Camera}', '${3:Direction}', {",
            "\tLINKID_DataType=\"FuID\",",
            "\tINPID_InputControl = \"ComboIDControl\",",
            "\tINPID_DefaultID  = \"Front\",",
            "\t{CCS_AddString = \"+X Axis: Right\", CCID_AddID = \"Right\", },",
            "\t{CCS_AddString = \"-X Axis: Left\",  CCID_AddID = \"Left\", },",
            "\t{CCS_AddString = \"-Z Axis: Front\", CCID_AddID = \"Front\", },",
            "\t{CCS_AddString = \"+Z Axis: Back\",  CCID_AddID = \"Back\", },",
            "})",
        ],
        "description": "Add Combo Id Control to Fusion's Inspector Page"
    },

    "Add Input File Control": {
        "prefix": "!AddFile",
        "scope": "fuse",
        "body": [
            "In${1:File} = self:AddInput('${2:File}', '${2}', {",
            "\tLINKID_DataType=\"Text\",",
            "\tINPID_InputControl = \"FileControl\",",
            "\tFC_ClipBrowse = true,",
            "})",
        ],
        "description": "Add FileControl dialog to Fusion's Inspector Page"
    },

    "Add Font File and Style Control": {
        "prefix": "!AddFontFile",
        "scope": "fuse",
        "body": [
            "In${1:Font} = self:AddInput('${2:Font}', '${2}', {",
            "\tLINKID_DataType=\"Text\",",
            "\tINPID_InputControl = \"FontFileControl\",",
            "\tIC_ControlGroup = ${3:2},",
            "\tIC_ControlID = 1,",
            "\tINP_Level = 1,",
            "\tINP_DoNotifyChanged = true,",
            "})",
            "",
            "",
            "In${4:FontStyle} = self:AddInput('${5:Style}', '${5}', {",
            "\tLINKID_DataType=\"Text\",",
            "\tINPID_InputControl = \"FontFileControl\",",
            "\tIC_ControlGroup = ${3},",
            "\tIC_ControlID = 2,",
            "\tINP_Level = 1,",
            "\tINP_DoNotifyChanged = true,",
            "})",
        ],
        "description": "Add Font Style Control to Fusion's Inspector Page"
    },

    "Add Gradient Control": {
        "prefix": "!AddGradient",
        "scope": "fuse",
        "body": [
            "In${1:Gradient} = self:AddInput('${2:Gradient}', '${2}', {",
            "\tLINKS_Name = \"Gradient\",",
            "\tLINKID_DataType=\"Gradient\",",
            "\tINPID_InputControl = \"GradientControl\",",
            "\tINP_MinAllowed = -100000.0,",
            "\tINP_MaxAllowed = 100000.0,",
            "\tINP_MinScale = 0.0,",
            "\tINP_MaxScale = 1.0,",
            "\tINPP_DefaultParam = Gradient(\"${3|GP_BlackToWhite,GP_None,GP_SolidBlack,GP_SolidWhite,GP_WhiteToBlack,GP_BlackToTransparant,GP_BlackToTransparent,GP_WhiteToTransparant ,GP_WhiteToTransparent|}\")",
            "})",
        ],
        "description": "Add Gradient Control to Fusion's Inspector Page"
    },

    "Add Label Control": {
        "prefix": "!AddLabel",
        "scope": "fuse",
        "body": [
            "In${1:Label} = self:AddInput('${2:This is a label}', '${3:Label1}', {",
            "\tLINKID_DataType=\"Text\",",
            "\tINPID_InputControl = \"LabelControl\",",
            "\tINP_External = false,",
            "\tINP_Passive = true,",
            "})",
        ],
        "description": "Add Label Control to Fusion's Inspector Page"
    },

    "Add MultiButton Control": {
        "prefix": "!AddMultiButton",
        "scope": "fuse",
        "body": [
            "In${1:Operation} = self:AddInput('${2:Operation}', '${2}', {",
            "\tLINKID_DataType=\"Number\",",
            "\tINPID_InputControl = \"MultiButtonControl\",",
            "\tINPID_Default = \"0.0\",",
            "\t{MBTNC_AddButton = \"Min\", MBTNCD_ButtonWidth = 0.25, },",
            "\t{MBTNC_AddButton = \"Max\", MBTNCD_ButtonWidth = 0.25, },",
            "\t{MBTNC_AddButton = \"Add\", MBTNCD_ButtonWidth = 0.25, },",
            "\t{MBTNC_AddButton = \"Sub\", MBTNCD_ButtonWidth = 0.25, },",
            "})",
        ],
        "description": "Add MultiButton Control to Fusion's Inspector Page"
    },

    "Add MultiButton ID Control": {
        "prefix": "!AddMultiButtonID",
        "scope": "fuse",
        "body": [
            "In${1:MultiButton} = self:AddInput('${2:Multibutton Label}', '${3:Multibutton1}', {",
            "\tLINKID_DataType=\"FuID\",",
            "\tINPID_InputControl = \"MultiButtonIDControl\",",
            "\tINPID_Default = \"0.0\",",
            "\t{MBTNC_AddButton = \"RGB\", MBTNCID_AddID = \"RGB\", },",
            "\t{MBTNC_AddButton = \"HLS\", MBTNCID_AddID = \"HLS\", },",
            "\t{MBTNC_AddButton = \"HSV\", MBTNCID_AddID = \"HSV\", },",
            "\t{MBTNC_AddButton = \"LAB\", MBTNCID_AddID = \"LAB\", },",
            "\tMBTNC_StretchToFit = true,",
            "\tINPID_DefaultID = \"HLS\",",
            "})",
        ],
        "description": "Add MultiButton ID Control to Fusion's Inspector Page"
    },

    "Add OffSet Control": {
        "prefix": "!AddOffset",
        "scope": "fuse",
        "body": [
            "In${1:Center} = self:AddInput('${2:Center}', '${2}', {",
            "\tLINKID_DataType=\"Point\",",
            "\tINPID_InputControl = \"OffsetControl\",",
            "\tINPID_PreviewControl = \"CrosshairControl\",",
            "\tCHC_Style = \"${3|DiagonalCross,NormalCross,Circle,Rectangle|}\",",
            "\tPC_GrabPriority = -1",
            "})",
        ],
        "description": "Add OffSet Control to Fusion's Inspector Page"
    },

    "Add Range Control": {
        "prefix": "!AddRange",
        "scope": "fuse",
        "body": [
            "In${1:Low} = self:AddInput('${2:My Low Value}', '${3:lowValue1}', {",
            "\tLINKID_DataType=\"Number\",",
            "\tINPID_InputControl = \"RangeControl\",",
            "\tINP_Default = 0.0,",
            "\tIC_ControlGroup = ${4:2},",
            "\tIC_ControlID = 0,",
            "})",
            "",
            "",
            "In${5:High} = self:AddInput('${6:My High Value}', '${7:highValue1}', {",
            "\tLINKID_DataType=\"Number\",",
            "\tINPID_InputControl = \"RangeControl\",",
            "\tINP_Default = 1.0,",
            "\tIC_ControlGroup = ${4},",
            "\tIC_ControlID = 1,",
            "})",
        ],
        "description": "Add Range Control to Fusion's Inspector Page"
    },


    "Add Screw Control": {
        "prefix": "!AddScrew",
        "scope": "fuse",
        "body": [
            "In${1:Screw} = self:AddInput('${2:Screw Label}', '${3:Screw1}', {",
            "\tLINKID_DataType=\"Number\",",
            "\tINPID_InputControl = \"ScrewControl\",",
            "\tINP_MinScale = -10000.0,",
            "\tINP_MaxScale = 10000.0,",
            "\tINP_Default = 1234,",
            "})",
        ],
        "description": "Add Screw Control to Fusion's Inspector Page"
    },

    "Add Slider Control": {
        "prefix": "!AddSlider",
        "scope": "fuse",
        "body": [
            "In${1:Slider} = self:AddInput('${2:Slider Label}', '${3:Slider1}', {",
            "\tLINKID_DataType=\"Number\",",
            "\tINPID_InputControl = \"SliderControl\",",
            "\tINP_MinAllowed = 0,",
            "\tINP_MaxScale = 100.0,",
            "\tINP_Default = 4.0,",
            "})",
        ],
        "description": "Add Slider Control to Fusion's Inspector Page"
    },

    "Add TextEdit Control": {
        "prefix": "!AddTextEdit",
        "scope": "fuse",
        "body": [
            "In${1:TextEntry} = self:AddInput('${2:TextEdit Label}', '${3:Text}', {",
            "\tLINKID_DataType=\"Text\",",
            "\tINPID_InputControl = \"TextEditControl\",",
            "\tINPS_DefaultText = \"Type something...\",",
            "\tTEC_Lines = 3,        -- height of text entry (default is 8)",
            "\tTEC_Wrap = true,      -- automatic word-wrapping (default is false)",
            "\tTEC_ReadOnly = false, -- default is false (you should also set INP_External = false)",
            "\tINP_External = false,",
            "\tTEC_CharLimit = 40,    -- maximum number of allowed characters default is 0 no limit",
            "\tTEC_DeferSetInputs = true, -- call NotifyChanged when focus is lost (default is false, call on every key stroke)",
            "})",
        ],
        "description": "Add TextEdit Control to Fusion's Inspector Page"
    },

    "Add Output Control": {
        "prefix": "!AddOutput",
        "scope": "fuse",
        "body": [
            "Out${0:variableName} = self:AddOutput('${2:labelname}', '${2}', {",
            "\tLINKID_DataType='${3|Image,FuID,Gradient,Number,Particles,Point,Text|}',",
            "\tLINK_MAIN = 1",
            "})",
        ],
        "description": "Add an input control for a Fuse"
    },

    "Control Nest":{
        "prefix": "!ControlNest",
        "scope": "fuse",
        "body": [
            "self:BeginControlNest(\"${1:Control Name}\", \"${2:ScriptName}\", ${3|false,true|}, {})",
            "\t$0",
            "self:EndControlNest()",
        ],
        "description": "Creates a control nest for a control group"
    }

}